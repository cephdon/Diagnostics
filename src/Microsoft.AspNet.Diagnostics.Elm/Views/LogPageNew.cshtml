@using System
@using System.Collections.Generic
@using System.Globalization
@using System.Linq
@using Microsoft.AspNet.Diagnostics.Elm.Views
@using Microsoft.AspNet.Diagnostics.Elm
@using Microsoft.AspNet.Diagnostics.Views
@using Microsoft.Framework.Logging

@functions
{
    //public LogPageNew(LogPageModelNew model)
    //{
    //    Model = model;
    //}

    public LogPageModelNew Model { get; set; }
}

@* writes one log row indented by the given level *@
@helper LogRow(MessageNode log, int level) {
    if (log.Severity >= Model.Options.MinLevel && 
        (string.IsNullOrEmpty(Model.Options.NamePrefix) || log.Name.StartsWith(Model.Options.NamePrefix, StringComparison.Ordinal)))
    {
        <tr class="logRow">
            <td>@string.Format("{0:MM/dd/yy}", log.Time)</td>
            <td>@string.Format("{0:H:mm:ss}", log.Time)</td>
            <td title="@log.Name">@log.Name</td>
            <td class="@log.Severity.ToString().ToLowerInvariant()">@log.Severity</td>
            <td title="@log.Message">
                @for (var i = 0; i < level; i++)
                {
                    <span class="tab"></span>
                }
                @log.Message
            </td>
            <td title="@log.Exception">@log.Exception</td>
        </tr>
    }
}

@helper Traverse(LogNode node, int level, Dictionary<string, int> counts)
{
    @{ var scopeNode = node as ScopeNodeNew; }

    @*// print start of scope
    @LogRow(new MessageNode()
    {
        Name = node.Name,
        Time = node.StartTime,
        Severity = LogLevel.Verbose,
        Message = "Beginning " + node.State,
    }, level);*@
        
    @if (scopeNode == null)
    {
        var messageNode = (MessageNode)node;
        @LogRow(messageNode, level)
        counts[messageNode.Severity.ToString()]++;
    }
    else
    {
        foreach (var childNode in scopeNode.Children)
        {
            @Traverse(childNode, level + 1, counts)
        }
    }

    @*// print end of scope
    @LogRow(new MessageNode()
    {
        Name = node.Name,
        Time = node.EndTime,
        Severity = LogLevel.Verbose,
        Message = string.Format("Completed {0} in {1}ms", node.State, node.EndTime - node.StartTime)
    }, level);*@
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>ASP.NET Logs</title>
    <script src="//ajax.aspnetcdn.com/ajax/jquery/jquery-2.1.1.min.js"></script>
    <style>
        <%$ include: LogPage.css %>
        <%$ include: Shared.css %>
    </style>
</head>
<body>
    <h1>ASP.NET Logs</h1>
    <form id="viewOptions" method="get">
        <select name="level">
            @foreach (var severity in Enum.GetValues(typeof(LogLevel)))
            {
                var severityInt = (int)severity;
                if ((int)Model.Options.MinLevel == severityInt)
                {
                    <option value="@severityInt" selected="selected">@severity</option>
                }
                else
                {
                    <option value="@severityInt">@severity</option>
                }
            }
        </select>
        <input type="text" name="name" value="@Model.Options.NamePrefix" />
        <input type="submit" value="filter" />
    </form>
    <form id="clear" method="post" action="">
        <button type="submit" name="clear" value="1">Clear Logs</button>
    </form>

    <table id="requestTable">
        <thead id="requestHeader">
            <tr>
                <th class="path">Path</th>
                <th class="method">Method</th>
                <th class="host">Host</th>
                <th class="statusCode">Status Code</th>
                <th class="logs">Logs</th>
            </tr>
        </thead>
        <colgroup>
            <col />
            <col />
            <col />
            <col />
            <col />
        </colgroup>
        @foreach (var activity in Model.Activities.Reverse())
        {
             @{ var scopeNode = activity.Root as ScopeNodeNew; }
            <tbody>
                <tr class="requestRow">
                    @{
                        var activityPath = Model.Path.Value + "/" + activity.Id;
                        if (activity.HttpInfo != null)
                        {
                        	<td><a href="@activityPath" title="@activity.HttpInfo.Path">@activity.HttpInfo.Path</a></td>
                            <td>@activity.HttpInfo.Method</td>
                            <td>@activity.HttpInfo.Host</td>
                            <td>@activity.HttpInfo.StatusCode</td>
                        }
                        else
                        {
                            @if (scopeNode != null)
                            {
                            <td colspan="4"><a href="@activityPath" title="@scopeNode.State">@scopeNode.State</a></td>
                            }
                            else
                            {
                                <td colspan="4"><a href="@activityPath">Non-scope Log</a></td>
                            }
                        }
                    }
                    <td class="logTd">
                        <table class="logTable">
                            <thead class="logHeader">
                                <tr class="headerRow">
                                    <th class="date">Date</th>
                                    <th class="time">Time</th>
                                    <th class="name">Name</th>
                                    <th class="severity">Severity</th>
                                    <th class="state">State</th>
                                    <th>Error<span class="collapse">^</span></th>
                                </tr>
                            </thead>
                            @{
                                var counts = new Dictionary<string, int>();
                                counts["Critical"] = 0;
                                counts["Error"] = 0;
                                counts["Warning"] = 0;
                                counts["Information"] = 0;
                                counts["Verbose"] = 0;
                            }
                            <tbody class="logBody">
                                @if (scopeNode == null)
                                {
                                    // message not within a scope
                                    var messageNode = (MessageNode)activity.Root;
                                    @LogRow(messageNode, 0)
                                    counts[messageNode.Severity.ToString()] = 1;
                                }
                                else
                                {
                                    @Traverse(scopeNode, 0, counts)
                                }
                            </tbody>
                            <tbody class="summary">
                                <tr class="logRow">
                                    <td>@activity.Time.ToString("MM-dd-yyyy HH:mm:ss")</td>
                                    @foreach (var kvp in counts)
                                    {
                                        if (string.Equals("Verbose", kvp.Key)) {
                                            <td>@kvp.Value @kvp.Key<span class="collapse">v</span></td>
                                        }
                                        else
                                        {
                                            <td>@kvp.Value @kvp.Key</td>
                                        }
                                    }
                                </tr>
                            </tbody>
                        </table>
                    </td>
                </tr>
            </tbody>
        }
    </table>
    <script type="text/javascript">
        $(document).ready(function () {
            $(".logBody").hide();
            $(".logTable > thead").hide();
            $(".logTable > thead").click(function () {
                $(this).closest(".logTable").find("tbody").hide();
                $(this).closest(".logTable").find(".summary").show();
                $(this).hide();
            });
            $(".logTable > .summary").click(function () {
                $(this).closest(".logTable").find("tbody").show();
                $(this).closest(".logTable").find("thead").show();
                $(this).hide();
            });
        });
    </script>
</body>
</html>